This file is to document any internal things Questlog does and how Questlog is built.

Questlog is a Forge mod. To modify any dependency versions or mappings, refer to build.properties, don't change them in build.gradle.

Quest syncing and managing is done on the server.
Both the logical client and logical server keep a copy of QuestManager (server actually holds one for each player).
Client keeps a copy of QuestManager in QuestManager.INSTANCE (error thrown when getting instance on server),
server keeps them in ServerPlayerManager (ServerPlayerManager.INSTANCE) (instance is always null on client).

Upon login, client requests its QuestManager data from server, to sync it.
On server start, server initializes its ServerPlayerManager with each player's QuestManager from a persistent file.

TODO: sync packets

Quests are represented by a Quest class. Each Quest class instance is a different quest (i.e. two JumpQuest classes do not represent the same quest).
Quest types are implemented by a DerivedQuest class, which gets its definition and inner workings from a quest definition JSON file, or their respective superclass (i.e. JumpQuest). QuestManager keeps track of their respective active quests, as well as the completed quests.

A Quest superclass must implement a way to track progress in units: getUnits(), setUnits(int), getTotalUnits().
Let's say you must slay a hundred mobs of any kind, and you've killed 30 mobs since the quest started,
which means getUnits() must return 30 and getTotalUnits() must return 100.

A Quest superclass has access to persistent data storage for stuff like keeping track of types of mobs killed or amount of jumps when the quest started.
NOTE: The Quest class takes care of storing units by itself.

The core subpackage contains mod-specific data structures and classes essential to the core function of the mod. This does not include stuff like configs, guis, packet handlers, game registries, events, etc.